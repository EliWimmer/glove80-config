/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LC(LS(LG(LALT)))

// layers

#define DEFAULT 0
#define LOWER 1
#define MAGIC 2
#define FACTORY_TEST 3

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 1>, <&to 1>;
        };

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        home_row: home_row {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <36 37 38 41 42 43>;
            hold-trigger-on-release;
            require-prior-idle-ms = <170>;
            quick-tap-ms = <300>;
            tapping-term-ms = <220>;
        };

        thmb_lay: thmb_lay {
            compatible = "zmk,behavior-hold-tap";
            label = "THMB_LAY";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            hold-trigger-on-release;
            require-prior-idle-ms = <170>;
            quick-tap-ms = <300>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <55 56 57 72 73 74 52 53 54 69 70 71>;
        };

        thmb_mod: thmb_mod {
            compatible = "zmk,behavior-hold-tap";
            label = "THMB_MOD";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            hold-trigger-on-release;
            require-prior-idle-ms = <170>;
            quick-tap-ms = <300>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <55 56 57 72 73 74 52 53 54 69 70 71>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };

        equal: equal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp EQUAL &kp EQUAL>;
            label = "EQUAL";
        };

        not_equal: not_equal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EXCL &kp EQUAL &kp EQUAL>;
            label = "NOT_EQUAL";
        };

        arrow_func: arrow_func {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp GT>;
            label = "ARROW_FUNC";
        };

        or_op: or_op {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp PIPE &kp PIPE>;
            label = "OR_OP";
        };

        and_op: and_op {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp AMPS &kp AMPS>;
            label = "AND_OP";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  =    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                                 |  Y   |   U   |   I   |  O   |   P   |   \  |
            // |  ESC  |  A  |  S  |  D   |  F   |  G   |                                                 |  H   |   J   |   K   |  L   |   ;   |   '  |
            // |   `   |  Z  |  X  |  C   |  V   |  B   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  N   |   M   |   ,   |  .   |   /   | PGUP |
            // | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  [   |   ]   | PGDN |

            bindings = <
&kp F1      &kp F2    &kp F3                    &kp F4                &kp F5                                                                                                                                                                     &kp F6                    &kp F7                &kp F8                    &kp F9    &kp F10
&kp EQUAL   &kp N1    &kp N2                    &kp N3                &kp N4                    &kp N5                                                                                                                                   &kp N6  &kp N7                    &kp N8                &kp N9                    &kp N0    &kp MINUS
&kp TAB     &kp Q     &kp W                     &kp E                 &kp R                     &kp T                                                                                                                                    &kp Y   &kp U                     &kp I                 &kp O                     &kp P     &kp BSLH
&kp ESC     &kp A     &home_row LEFT_CONTROL S  &home_row LEFT_ALT D  &home_row LEFT_COMMAND F  &kp G                                                                                                                                    &kp H   &home_row LEFT_COMMAND J  &home_row LEFT_ALT K  &home_row LEFT_CONTROL L  &kp SEMI  &kp SQT
&kp GRAVE   &kp Z     &kp X                     &kp C                 &kp V                     &kp B   &kp LC(L)              &kp LCTRL       &layer_td  &kp LGUI  &kp RCTRL                     &thmb_mod LS(LA(LC(LEFT_GUI))) ESCAPE  &kp N   &kp M                     &kp COMMA             &kp DOT                   &kp FSLH  &kp PG_UP
&magic 3 0  &kp HOME  &kp END                   &kp LEFT              &kp RIGHT                         &thmb_lay 2 BACKSPACE  &kp LEFT_SHIFT  &kp LALT   &kp RALT  &thmb_mod LA(LC(LGUI)) ENTER  &thmb_lay 1 SPACE                              &kp UP                    &kp DOWN              &kp LBKT                  &kp RBKT  &kp PG_DN
            >;
        };

        lower_layer {
            bindings = <
&kp C_BRI_DN  &kp C_BRI_UP  &kp C_PREV        &kp C_NEXT    &kp C_PP                                                                                     &kp C_MUTE    &kp C_VOL_DN    &kp C_VOL_UP     &none            &kp PAUSE_BREAK
&trans        &none         &none             &none         &none             &kp HOME                                                   &kp LPAR        &kp KP_NUM    &kp KP_EQUAL    &kp KP_DIVIDE    &kp KP_MULTIPLY  &kp PSCRN
&trans        &none         &none             &none         &none             &kp END                                                    &kp RPAR        &kp KP_N7     &kp KP_N8       &kp KP_N9        &kp KP_MINUS     &kp SLCK
&trans        &none         &kp LEFT_CONTROL  &kp LEFT_ALT  &kp LEFT_COMMAND  &kp PG_UP                                                  &kp LEFT_ARROW  &kp UP_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp KP_PLUS      &none
&trans        &kp K_CMENU   &none             &kp F11       &kp F12           &kp PG_DN  &trans  &trans  &to 0   &trans  &trans  &trans  &kp COMMA       &kp KP_N1     &kp KP_N2       &kp KP_N3        &kp KP_ENTER     &trans
&trans        &kp CAPS      &kp INS           &kp F11       &kp F12                      &trans  &trans  &trans  &trans  &trans  &trans                  &kp KP_N0     &kp KP_N0       &kp KP_DOT       &kp KP_ENTER     &trans
            >;
        };

        symbols {
            bindings = <
&none   &trans  &trans           &trans                 &trans                                                                            &trans      &trans        &trans     &trans  &trans
&trans  &trans  &trans           &trans                 &trans    &trans                                                     &trans       &trans      &trans        &trans     &trans  &trans
&trans  &equal  &not_equal       &arrow_func            &and_op   &or_op                                                     &kp AT       &kp EQUAL   &kp PLUS      &kp MINUS  &trans  &trans
&trans  &kp LT  &kp LEFT_BRACE   &kp LEFT_PARENTHESIS   &kp LBKT  &kp GRAVE                                                  &kp PERCENT  &kp CARET   &kp EXCL      &kp UNDER  &trans  &trans
&trans  &kp GT  &kp RIGHT_BRACE  &kp RIGHT_PARENTHESIS  &kp RBKT  &kp TILDE  &trans  &trans  &trans  &trans  &trans  &trans  &kp STAR     &kp DOLLAR  &kp QUESTION  &trans     &trans  &trans
&trans  &trans  &trans           &trans                 &trans               &trans  &trans  &trans  &trans  &trans  &trans               &trans      &trans        &trans     &trans  &trans
            >;
        };

        magic_layer {
            bindings = <
&bt BT_CLR   &none            &none            &none            &none                                                                                     &none  &none  &none  &none  &bt BT_CLR_ALL
&none        &none            &none            &none            &none            &none                                                             &none  &none  &none  &none  &none  &none
&none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                   &none  &none  &none  &none  &none  &none
&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                   &none  &none  &none  &none  &none  &bootloader
&sys_reset   &none            &none            &none            &none            &none            &bt_2  &bt_3  &none         &none  &none  &none  &none  &none  &none  &none  &none  &sys_reset
&none        &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB  &none  &none  &none         &none  &none  &none  &none  &to 4
            >;
        };

        factory_test_layer {
            bindings = <
&kp N0  &kp N6  &kp N2  &kp N8  &kp N4                                                                  &kp N4  &kp N8  &kp N2  &kp N6  &kp N0
&kp N1  &kp N7  &kp N3  &kp N9  &kp N5  &kp N0                                                  &kp N0  &kp N5  &kp N9  &kp N3  &kp N7  &kp N1
&kp N2  &kp N8  &kp N4  &kp N0  &kp N6  &kp N1                                                  &kp N1  &kp N6  &kp N0  &kp N4  &kp N8  &kp N2
&kp N3  &kp N9  &kp N5  &kp N1  &kp N7  &kp N2                                                  &kp N2  &kp N7  &kp N1  &kp N5  &kp N9  &kp N3
&kp N4  &kp N0  &kp N6  &kp N2  &kp N8  &kp N3  &kp N4  &kp N5  &kp N6  &kp N6  &kp N5  &kp N4  &kp N3  &kp N8  &kp N2  &kp N6  &kp N0  &kp N4
&kp N5  &kp N1  &kp N7  &kp N3  &kp N9          &kp N7  &kp N8  &kp N9  &kp N9  &kp N8  &kp N7          &kp N9  &kp N3  &kp N7  &kp N1  &kp N5
            >;
        };
    };
};
